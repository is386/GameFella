package emu

var (
	CYCLES = []int{
		1, 3, 2, 2, 1, 1, 2, 1, 5, 2, 2, 2, 1, 1, 2, 1,
		0, 3, 2, 2, 1, 1, 2, 1, 3, 2, 2, 2, 1, 1, 2, 1,
		2, 3, 2, 2, 1, 1, 2, 1, 2, 2, 2, 2, 1, 1, 2, 1,
		2, 3, 2, 2, 3, 3, 3, 1, 2, 2, 2, 2, 1, 1, 2, 1,
		1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1,
		1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1,
		1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1,
		2, 2, 2, 2, 2, 2, 0, 2, 1, 1, 1, 1, 1, 1, 2, 1,
		1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1,
		1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1,
		1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1,
		1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1,
		2, 3, 3, 4, 3, 4, 2, 4, 2, 4, 3, 0, 3, 6, 2, 4,
		2, 3, 3, 0, 3, 4, 2, 4, 2, 4, 3, 0, 3, 0, 2, 4,
		3, 3, 2, 0, 0, 4, 2, 4, 4, 1, 4, 0, 0, 0, 2, 4,
		3, 3, 2, 1, 0, 4, 2, 4, 3, 2, 4, 1, 0, 0, 2, 4,
	}

	CB_CYCLES = []int{
		2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2,
		2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2,
		2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2,
		2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2,
		2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 3, 2,
		2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 3, 2,
		2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 3, 2,
		2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 3, 2,
		2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2,
		2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2,
		2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2,
		2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2,
		2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2,
		2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2,
		2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2,
		2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2,
	}

	INSTRUCTIONS = map[uint8]func(*CPU){
		0x03: incBC,
		0x04: incB,
		0x05: decB,
		0x0B: decBC,
		0x0C: incC,
		0x0D: decC,
		0x13: incDE,
		0x14: incD,
		0x15: decD,
		0x1B: decDE,
		0x1C: incE,
		0x1D: decE,
		0x23: incHL16,
		0x24: incH,
		0x25: decH,
		0x2B: decHL16,
		0x2C: incL,
		0x2D: decL,
		0x33: incSP,
		0x34: incHL,
		0x35: decHL,
		0x39: addHLSP,
		0x3B: decSP,
		0x3C: incA,
		0x3D: decA,
		0x09: addHLBC,
		0x19: addHLDE,
		0x29: addHLHL,
		0x2F: cpl,
		0x80: addAB,
		0x81: addAC,
		0x82: addAD,
		0x83: addAE,
		0x84: addAH,
		0x85: addAL,
		0x86: addAHL,
		0x87: addAA,
		0x88: adcAB,
		0x89: adcAC,
		0x8A: adcAD,
		0x8B: adcAE,
		0x8C: adcAH,
		0x8D: adcAL,
		0x8E: adcAHL,
		0x8F: adcAA,
		0x90: subAB,
		0x91: subAC,
		0x92: subAD,
		0x93: subAE,
		0x94: subAH,
		0x95: subAL,
		0x96: subAHL,
		0x97: subAA,
		0x98: sbcAB,
		0x99: sbcAC,
		0x9A: sbcAD,
		0x9B: sbcAE,
		0x9C: sbcAH,
		0x9D: sbcAL,
		0x9E: sbcAHL,
		0x9F: sbcAA,
		0xA0: andAB,
		0xA1: andAC,
		0xA2: andAD,
		0xA3: andAE,
		0xA4: andAH,
		0xA5: andAL,
		0xA6: andAHL,
		0xA7: andAA,
		0xA8: xorAB,
		0xA9: xorAC,
		0xAA: xorAD,
		0xAB: xorAE,
		0xAC: xorAH,
		0xAD: xorAL,
		0xAE: xorAHL,
		0xAF: xorAA,
		0xB0: orAB,
		0xB1: orAC,
		0xB2: orAD,
		0xB3: orAE,
		0xB4: orAH,
		0xB5: orAL,
		0xB6: orAHL,
		0xB7: orAA,
		0xB8: cpAB,
		0xB9: cpAC,
		0xBA: cpAD,
		0xBB: cpAE,
		0xBC: cpAH,
		0xBD: cpAL,
		0xBE: cpAHL,
		0xBF: cpAA,
		0xC6: adi,
		0xCE: aci,
		0xD6: sui,
		0xDE: sbi,
		0xE6: ani,
		0xE8: addSP,
		0xEE: xri,
		0xF6: ori,
		0xFE: cpi,
	}

	CB_INSTRUCTIONS = map[uint8]func(*CPU){
		0x40: bit0B,
		0x41: bit0C,
		0x42: bit0D,
		0x43: bit0E,
		0x44: bit0H,
		0x45: bit0L,
		0x46: bit0HL,
		0x47: bit0A,
		0x48: bit1B,
		0x49: bit1C,
		0x4A: bit1D,
		0x4B: bit1E,
		0x4C: bit1H,
		0x4D: bit1L,
		0x4E: bit1HL,
		0x4F: bit1A,
		0x50: bit2B,
		0x51: bit2C,
		0x52: bit2D,
		0x53: bit2E,
		0x54: bit2H,
		0x55: bit2L,
		0x56: bit2HL,
		0x57: bit2A,
		0x58: bit3B,
		0x59: bit3C,
		0x5A: bit3D,
		0x5B: bit3E,
		0x5C: bit3H,
		0x5D: bit3L,
		0x5E: bit3HL,
		0x5F: bit3A,
		0x60: bit4B,
		0x61: bit4C,
		0x62: bit4D,
		0x63: bit4E,
		0x64: bit4H,
		0x65: bit4L,
		0x66: bit4HL,
		0x67: bit4A,
		0x68: bit5B,
		0x69: bit5C,
		0x6A: bit5D,
		0x6B: bit5E,
		0x6C: bit5H,
		0x6D: bit5L,
		0x6E: bit5HL,
		0x6F: bit5A,
		0x70: bit6B,
		0x71: bit6C,
		0x72: bit6D,
		0x73: bit6E,
		0x74: bit6H,
		0x75: bit6L,
		0x76: bit6HL,
		0x77: bit6A,
		0x78: bit7B,
		0x79: bit7C,
		0x7A: bit7D,
		0x7B: bit7E,
		0x7C: bit7H,
		0x7D: bit7L,
		0x7E: bit7HL,
		0x7F: bit7A,
	}
)
