package emu

var (
	CYCLES = []int{
		1, 3, 2, 2, 1, 1, 2, 1, 5, 2, 2, 2, 1, 1, 2, 1,
		0, 3, 2, 2, 1, 1, 2, 1, 3, 2, 2, 2, 1, 1, 2, 1,
		2, 3, 2, 2, 1, 1, 2, 1, 2, 2, 2, 2, 1, 1, 2, 1,
		2, 3, 2, 2, 3, 3, 3, 1, 2, 2, 2, 2, 1, 1, 2, 1,
		1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1,
		1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1,
		1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1,
		2, 2, 2, 2, 2, 2, 0, 2, 1, 1, 1, 1, 1, 1, 2, 1,
		1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1,
		1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1,
		1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1,
		1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1,
		2, 3, 3, 4, 3, 4, 2, 4, 2, 4, 3, 0, 3, 6, 2, 4,
		2, 3, 3, 0, 3, 4, 2, 4, 2, 4, 3, 0, 3, 0, 2, 4,
		3, 3, 2, 0, 0, 4, 2, 4, 4, 1, 4, 0, 0, 0, 2, 4,
		3, 3, 2, 1, 0, 4, 2, 4, 3, 2, 4, 1, 0, 0, 2, 4,
	}

	CB_CYCLES = []int{
		2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2,
		2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2,
		2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2,
		2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2,
		2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 3, 2,
		2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 3, 2,
		2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 3, 2,
		2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 3, 2,
		2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2,
		2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2,
		2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2,
		2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2,
		2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2,
		2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2,
		2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2,
		2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2,
	}

	INSTRUCTIONS = map[uint8]func(*CPU){
		0x00: nop,
		0x01: ldBC16,
		0x02: ldBCA,
		0x03: incBC,
		0x04: incB,
		0x05: decB,
		0x06: ldiB,
		0x07: rlca,
		0x08: ld16SP,
		0x09: addHLBC,
		0x0A: ldABC,
		0x0B: decBC,
		0x0C: incC,
		0x0D: decC,
		0x0E: ldiC,
		0x0F: rrca,
		0x10: nop,
		0x11: ldDE16,
		0x12: ldDEA,
		0x13: incDE,
		0x14: incD,
		0x15: decD,
		0x16: ldiD,
		0x17: rla,
		0x18: jr,
		0x19: addHLDE,
		0x1A: ldADE,
		0x1B: decDE,
		0x1C: incE,
		0x1D: decE,
		0x1E: ldiE,
		0x1F: rra,
		0x20: jrnz,
		0x21: ldHL16,
		0x22: ldHLIA,
		0x23: incHL16,
		0x24: incH,
		0x25: decH,
		0x26: ldiH,
		0x27: daa,
		0x28: jrz,
		0x29: addHLHL,
		0x2A: ldAHLI,
		0x2B: decHL16,
		0x2C: incL,
		0x2D: decL,
		0x2E: ldiL,
		0x2F: cpl,
		0x30: jrnc,
		0x31: ldSP16,
		0x32: ldHLDA,
		0x33: incSP,
		0x34: incHL,
		0x35: decHL,
		0x36: ldiHL,
		0x37: scf,
		0x38: jrc,
		0x39: addHLSP,
		0x3A: ldAHLD,
		0x3B: decSP,
		0x3C: incA,
		0x3D: decA,
		0x3E: ldiA,
		0x3F: ccf,
		0x40: ldBB,
		0x41: ldBC,
		0x42: ldBD,
		0x43: ldBE,
		0x44: ldBH,
		0x45: ldBL,
		0x46: ldBHL,
		0x47: ldBA,
		0x48: ldCB,
		0x49: ldCC,
		0x4A: ldCD,
		0x4B: ldCE,
		0x4C: ldCH,
		0x4D: ldCL,
		0x4E: ldCHL,
		0x4F: ldCA,
		0x50: ldDB,
		0x51: ldDC,
		0x52: ldDD,
		0x53: ldDE,
		0x54: ldDH,
		0x55: ldDL,
		0x56: ldDHL,
		0x57: ldDA,
		0x58: ldEB,
		0x59: ldEC,
		0x5A: ldED,
		0x5B: ldEE,
		0x5C: ldEH,
		0x5D: ldEL,
		0x5E: ldEHL,
		0x5F: ldEA,
		0x60: ldHB,
		0x61: ldHC,
		0x62: ldHD,
		0x63: ldHE,
		0x64: ldHH,
		0x65: ldHL,
		0x66: ldHHL,
		0x67: ldHA,
		0x68: ldLB,
		0x69: ldLC,
		0x6A: ldLD,
		0x6B: ldLE,
		0x6C: ldLH,
		0x6D: ldLL,
		0x6E: ldLHL,
		0x6F: ldLA,
		0x70: ldHLB,
		0x71: ldHLC,
		0x72: ldHLD,
		0x73: ldHLE,
		0x74: ldHLH,
		0x75: ldHLL,
		0x76: halt,
		0x77: ldHLA,
		0x78: ldAB,
		0x79: ldAC,
		0x7A: ldAD,
		0x7B: ldAE,
		0x7C: ldAH,
		0x7D: ldAL,
		0x7E: ldAHL,
		0x7F: ldAA,
		0x80: addAB,
		0x81: addAC,
		0x82: addAD,
		0x83: addAE,
		0x84: addAH,
		0x85: addAL,
		0x86: addAHL,
		0x87: addAA,
		0x88: adcAB,
		0x89: adcAC,
		0x8A: adcAD,
		0x8B: adcAE,
		0x8C: adcAH,
		0x8D: adcAL,
		0x8E: adcAHL,
		0x8F: adcAA,
		0x90: subAB,
		0x91: subAC,
		0x92: subAD,
		0x93: subAE,
		0x94: subAH,
		0x95: subAL,
		0x96: subAHL,
		0x97: subAA,
		0x98: sbcAB,
		0x99: sbcAC,
		0x9A: sbcAD,
		0x9B: sbcAE,
		0x9C: sbcAH,
		0x9D: sbcAL,
		0x9E: sbcAHL,
		0x9F: sbcAA,
		0xA0: andAB,
		0xA1: andAC,
		0xA2: andAD,
		0xA3: andAE,
		0xA4: andAH,
		0xA5: andAL,
		0xA6: andAHL,
		0xA7: andAA,
		0xA8: xorAB,
		0xA9: xorAC,
		0xAA: xorAD,
		0xAB: xorAE,
		0xAC: xorAH,
		0xAD: xorAL,
		0xAE: xorAHL,
		0xAF: xorAA,
		0xB0: orAB,
		0xB1: orAC,
		0xB2: orAD,
		0xB3: orAE,
		0xB4: orAH,
		0xB5: orAL,
		0xB6: orAHL,
		0xB7: orAA,
		0xB8: cpAB,
		0xB9: cpAC,
		0xBA: cpAD,
		0xBB: cpAE,
		0xBC: cpAH,
		0xBD: cpAL,
		0xBE: cpAHL,
		0xBF: cpAA,
		0xC0: retnz,
		0xC1: popBC,
		0xC2: jpnz,
		0xC3: jp,
		0xC4: callnz,
		0xC5: pushBC,
		0xC6: adi,
		0xC7: rst0,
		0xC8: retz,
		0xC9: ret,
		0xCA: jpz,
		0xCB: nop,
		0xCC: callz,
		0xCD: call,
		0xCE: aci,
		0xCF: rst8,
		0xD0: retnc,
		0xD1: popDE,
		0xD2: jpnc,
		0xD3: nop,
		0xD4: callnc,
		0xD5: pushDE,
		0xD6: sui,
		0xD7: rst10,
		0xD8: retc,
		0xD9: reti,
		0xDA: jpc,
		0xDB: nop,
		0xDC: callc,
		0xDD: nop,
		0xDE: sbi,
		0xDF: rst18,
		0xE0: ldh16A,
		0xE1: popHL,
		0xE2: ldhCA,
		0xE3: nop,
		0xE4: nop,
		0xE5: pushHL,
		0xE6: ani,
		0xE7: rst20,
		0xE8: addSP,
		0xE9: jpHL,
		0xEA: ld16A,
		0xEB: nop,
		0xEC: nop,
		0xED: nop,
		0xEE: xri,
		0xEF: rst28,
		0xF0: ldhA16,
		0xF1: popAF,
		0xF2: ldhAC,
		0xF3: di,
		0xF4: nop,
		0xF5: pushAF,
		0xF6: ori,
		0xF7: rst30,
		0xF8: ldHLSP,
		0xF9: ldSPHL,
		0xFA: ldA16,
		0xFB: ei,
		0xFC: nop,
		0xFD: nop,
		0xFE: cpi,
		0xFF: rst38,
	}

	CB_INSTRUCTIONS = map[uint8]func(*CPU){
		0x00: rlcB,
		0x01: rlcC,
		0x02: rlcD,
		0x03: rlcE,
		0x04: rlcH,
		0x05: rlcL,
		0x06: rlcHL,
		0x07: rlcA,
		0x08: rrcB,
		0x09: rrcC,
		0x0A: rrcD,
		0x0B: rrcE,
		0x0C: rrcH,
		0x0D: rrcL,
		0x0E: rrcHL,
		0x0F: rrcA,
		0x10: rlB,
		0x11: rlC,
		0x12: rlD,
		0x13: rlE,
		0x14: rlH,
		0x15: rlL,
		0x16: rlHL,
		0x17: rlA,
		0x18: rrB,
		0x19: rrC,
		0x1A: rrD,
		0x1B: rrE,
		0x1C: rrH,
		0x1D: rrL,
		0x1E: rrHL,
		0x1F: rrA,
		0x20: slaB,
		0x21: slaC,
		0x22: slaD,
		0x23: slaE,
		0x24: slaH,
		0x25: slaL,
		0x26: slaHL,
		0x27: slaA,
		0x28: sraB,
		0x29: sraC,
		0x2A: sraD,
		0x2B: sraE,
		0x2C: sraH,
		0x2D: sraL,
		0x2E: sraHL,
		0x2F: sraA,
		0x30: swapB,
		0x31: swapC,
		0x32: swapD,
		0x33: swapE,
		0x34: swapH,
		0x35: swapL,
		0x36: swapHL,
		0x37: swapA,
		0x38: srlB,
		0x39: srlC,
		0x3A: srlD,
		0x3B: srlE,
		0x3C: srlH,
		0x3D: srlL,
		0x3E: srlHL,
		0x3F: srlA,
		0x40: bit0B,
		0x41: bit0C,
		0x42: bit0D,
		0x43: bit0E,
		0x44: bit0H,
		0x45: bit0L,
		0x46: bit0HL,
		0x47: bit0A,
		0x48: bit1B,
		0x49: bit1C,
		0x4A: bit1D,
		0x4B: bit1E,
		0x4C: bit1H,
		0x4D: bit1L,
		0x4E: bit1HL,
		0x4F: bit1A,
		0x50: bit2B,
		0x51: bit2C,
		0x52: bit2D,
		0x53: bit2E,
		0x54: bit2H,
		0x55: bit2L,
		0x56: bit2HL,
		0x57: bit2A,
		0x58: bit3B,
		0x59: bit3C,
		0x5A: bit3D,
		0x5B: bit3E,
		0x5C: bit3H,
		0x5D: bit3L,
		0x5E: bit3HL,
		0x5F: bit3A,
		0x60: bit4B,
		0x61: bit4C,
		0x62: bit4D,
		0x63: bit4E,
		0x64: bit4H,
		0x65: bit4L,
		0x66: bit4HL,
		0x67: bit4A,
		0x68: bit5B,
		0x69: bit5C,
		0x6A: bit5D,
		0x6B: bit5E,
		0x6C: bit5H,
		0x6D: bit5L,
		0x6E: bit5HL,
		0x6F: bit5A,
		0x70: bit6B,
		0x71: bit6C,
		0x72: bit6D,
		0x73: bit6E,
		0x74: bit6H,
		0x75: bit6L,
		0x76: bit6HL,
		0x77: bit6A,
		0x78: bit7B,
		0x79: bit7C,
		0x7A: bit7D,
		0x7B: bit7E,
		0x7C: bit7H,
		0x7D: bit7L,
		0x7E: bit7HL,
		0x7F: bit7A,
		0x80: res0B,
		0x81: res0C,
		0x82: res0D,
		0x83: res0E,
		0x84: res0H,
		0x85: res0L,
		0x86: res0HL,
		0x87: res0A,
		0x88: res1B,
		0x89: res1C,
		0x8A: res1D,
		0x8B: res1E,
		0x8C: res1H,
		0x8D: res1L,
		0x8E: res1HL,
		0x8F: res1A,
		0x90: res2B,
		0x91: res2C,
		0x92: res2D,
		0x93: res2E,
		0x94: res2H,
		0x95: res2L,
		0x96: res2HL,
		0x97: res2A,
		0x98: res3B,
		0x99: res3C,
		0x9A: res3D,
		0x9B: res3E,
		0x9C: res3H,
		0x9D: res3L,
		0x9E: res3HL,
		0x9F: res3A,
		0xA0: res4B,
		0xA1: res4C,
		0xA2: res4D,
		0xA3: res4E,
		0xA4: res4H,
		0xA5: res4L,
		0xA6: res4HL,
		0xA7: res4A,
		0xA8: res5B,
		0xA9: res5C,
		0xAA: res5D,
		0xAB: res5E,
		0xAC: res5H,
		0xAD: res5L,
		0xAE: res5HL,
		0xAF: res5A,
		0xB0: res6B,
		0xB1: res6C,
		0xB2: res6D,
		0xB3: res6E,
		0xB4: res6H,
		0xB5: res6L,
		0xB6: res6HL,
		0xB7: res6A,
		0xB8: res7B,
		0xB9: res7C,
		0xBA: res7D,
		0xBB: res7E,
		0xBC: res7H,
		0xBD: res7L,
		0xBE: res7HL,
		0xBF: res7A,
		0xC0: set0B,
		0xC1: set0C,
		0xC2: set0D,
		0xC3: set0E,
		0xC4: set0H,
		0xC5: set0L,
		0xC6: set0HL,
		0xC7: set0A,
		0xC8: set1B,
		0xC9: set1C,
		0xCA: set1D,
		0xCB: set1E,
		0xCC: set1H,
		0xCD: set1L,
		0xCE: set1HL,
		0xCF: set1A,
		0xD0: set2B,
		0xD1: set2C,
		0xD2: set2D,
		0xD3: set2E,
		0xD4: set2H,
		0xD5: set2L,
		0xD6: set2HL,
		0xD7: set2A,
		0xD8: set3B,
		0xD9: set3C,
		0xDA: set3D,
		0xDB: set3E,
		0xDC: set3H,
		0xDD: set3L,
		0xDE: set3HL,
		0xDF: set3A,
		0xE0: set4B,
		0xE1: set4C,
		0xE2: set4D,
		0xE3: set4E,
		0xE4: set4H,
		0xE5: set4L,
		0xE6: set4HL,
		0xE7: set4A,
		0xE8: set5B,
		0xE9: set5C,
		0xEA: set5D,
		0xEB: set5E,
		0xEC: set5H,
		0xED: set5L,
		0xEE: set5HL,
		0xEF: set5A,
		0xF0: set6B,
		0xF1: set6C,
		0xF2: set6D,
		0xF3: set6E,
		0xF4: set6H,
		0xF5: set6L,
		0xF6: set6HL,
		0xF7: set6A,
		0xF8: set7B,
		0xF9: set7C,
		0xFA: set7D,
		0xFB: set7E,
		0xFC: set7H,
		0xFD: set7L,
		0xFE: set7HL,
		0xFF: set7A,
	}
)
